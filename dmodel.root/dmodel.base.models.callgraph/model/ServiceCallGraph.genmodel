<?xml version="1.0" encoding="UTF-8"?>
<genmodel:GenModel xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
    xmlns:genmodel="http://www.eclipse.org/emf/2002/GenModel" modelDirectory="dmodel.pipeline.dt.callgraph/src-gen/java" modelPluginID=""
    modelName="ServiceCallGraph" updateClasspath="false" rootExtendsClass="org.eclipse.emf.ecore.impl.MinimalEObjectImpl$Container"
    importerID="org.eclipse.emf.importer.ecore" bundleManifest="false" complianceLevel="8.0"
    copyrightFields="false" editPluginID="dmodel.pipeline.dt.callgraph.edit" editorPluginID="dmodel.pipeline.dt.callgraph.editor"
    usedGenPackages="../../de.uka.ipd.sdq.identifier/model/identifier.genmodel#//identifier ../../org.palladiosimulator.pcm/model/pcm.genmodel#//pcm ../../de.uka.ipd.sdq.probfunction/model/ProbabilityFunction.genmodel#//probfunction ../../de.uka.ipd.sdq.stoex/model/stoex.genmodel#//stoex ../../de.uka.ipd.sdq.units/model/Units.genmodel#//units"
    importOrganizing="true">
  <foreignModel>ServiceCallGraph.ecore</foreignModel>
  <genPackages prefix="ServiceCallGraph" basePackage="dmodel.base.models.callgraph"
      disposableProviderFactory="true" ecorePackage="ServiceCallGraph.ecore#/">
    <genClasses ecoreClass="ServiceCallGraph.ecore#//ServiceCallGraph">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraph/nodes"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraph/edges"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraph/outgoingEdges"/>
      <genFeatures property="None" children="true" createChild="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraph/incomingEdges"/>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/addNode"
          body="ServiceCallGraphNode node = ServiceCallGraphFactory.eINSTANCE.createServiceCallGraphNode();&#xA;node.setHost(host);&#xA;node.setSeff(seff);&#xA;getNodes().add(node);&#xA;getIncomingEdges().put(node, new BasicEList&lt;ServiceCallGraphEdge>());&#xA;getOutgoingEdges().put(node, new BasicEList&lt;ServiceCallGraphEdge>());&#xA;&#xA;return node;">
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/addNode/seff"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/addNode/host"/>
      </genOperations>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/addEdge"
          body="// nodes&#xA;ServiceCallGraphNode fromNode = hasNode(from, fromContainer);&#xA;if (fromNode == null) {&#xA;&#x9;fromNode = this.addNode(from, fromContainer);&#xA;}&#xA;ServiceCallGraphNode toNode = hasNode(to, toContainer);&#xA;if (toNode == null) {&#xA;&#x9;toNode = this.addNode(to, toContainer);&#xA;}&#xA;// edge&#xA;ServiceCallGraphEdge edge = ServiceCallGraphFactory.eINSTANCE.createServiceCallGraphEdge();&#xA;edge.setFrom(fromNode);&#xA;edge.setTo(toNode);&#xA;edge.setValue(value);&#xA;edge.setExternalCall(externalCall);&#xA;&#xA;if (!getOutgoingEdges().containsKey(fromNode)) {&#xA;&#x9;getOutgoingEdges().put(fromNode, new BasicEList&lt;ServiceCallGraphEdge>());&#xA;}&#xA;getOutgoingEdges().get(fromNode).add(edge);&#xA;&#xA;if (!getIncomingEdges().containsKey(toNode)) {&#xA;&#x9;getIncomingEdges().put(toNode, new BasicEList&lt;ServiceCallGraphEdge>());&#xA;}&#xA;getIncomingEdges().get(toNode).add(edge);&#xA;&#xA;// add globally&#xA;getEdges().add(edge);">
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/addEdge/from"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/addEdge/to"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/addEdge/fromContainer"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/addEdge/toContainer"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/addEdge/externalCall"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/addEdge/value"/>
      </genOperations>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/incrementEdge"
          body="ServiceCallGraphEdge edge = this.hasEdge(from, to, fromContainer, toContainer, externalCall);&#xA;if (edge != null) {&#xA;&#x9;edge.setValue(edge.getValue() + 1);&#xA;} else {&#xA;&#x9;this.addEdge(from, to, fromContainer, toContainer, externalCall, 1);&#xA;}">
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/incrementEdge/from"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/incrementEdge/to"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/incrementEdge/fromContainer"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/incrementEdge/toContainer"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/incrementEdge/externalCall"/>
      </genOperations>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/hasEdge"
          body="return getEdges().stream().filter(edge -> {&#xA;&#x9;return (nodeEqual(from, fromContainer, edge.getFrom().getSeff(), edge.getFrom().getHost()))&#xA;&#x9;&#x9;&#x9;&amp;&amp; (nodeEqual(to, toContainer, edge.getTo().getSeff(), edge.getTo().getHost()))&#xA;&#x9;&#x9;&#x9;&amp;&amp; edge.getExternalCall().equals(externalCall);&#xA;}).findFirst().orElse(null);">
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/hasEdge/from"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/hasEdge/to"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/hasEdge/fromContainer"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/hasEdge/toContainer"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/hasEdge/externalCall"/>
      </genOperations>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/hasNode"
          body="return getNodes().stream()&#xA;&#x9;&#x9;.filter(n -> nodeEqual(node, host, n.getSeff(), n.getHost()))&#xA;&#x9;&#x9;.findFirst().orElse(null);">
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/hasNode/node"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/hasNode/host"/>
      </genOperations>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/nodeEqual"
          body="boolean nullEqual1 = node == null &amp;&amp; node2 == null;&#xA;boolean nullEqual2 = host == null &amp;&amp; host2 == null;&#xA;&#xA;boolean anyNull1 = node == null || node2 == null;&#xA;boolean anyNull2 = host == null || host2 == null;&#xA;&#xA;if (nullEqual1 &amp;&amp; nullEqual2) {&#xA;&#x9;return true;&#xA;} else if (nullEqual2 &amp;&amp; !anyNull1) {&#xA;&#x9;return node.getId().equals(node2.getId());&#xA;} else if (nullEqual1 &amp;&amp; !anyNull2) {&#xA;&#x9;return host.getId().equals(host2.getId());&#xA;} else if (anyNull1 || anyNull2) {&#xA;&#x9;return false;&#xA;} else {&#xA;&#x9;return node.getId().equals(node2.getId()) &amp;&amp; host.getId().equals(host2.getId());&#xA;}">
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/nodeEqual/node"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/nodeEqual/host"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/nodeEqual/node2"/>
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/nodeEqual/host2"/>
      </genOperations>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/removeEdge"
          body="// remove from all sub lists&#xA;getOutgoingEdges().get(edge.getFrom()).remove(edge);&#xA;getIncomingEdges().get(edge.getTo()).remove(edge);&#xA;&#xA;// remove from global list&#xA;getEdges().remove(edge);">
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/removeEdge/edge"/>
      </genOperations>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/rebuild"
          body="getIncomingEdges().clear();&#xA;getOutgoingEdges().clear();&#xA;&#xA;for (ServiceCallGraphNode node : getNodes()) {&#xA;&#x9;getOutgoingEdges().put(node, new BasicEList&lt;ServiceCallGraphEdge>());&#xA;&#x9;getIncomingEdges().put(node, new BasicEList&lt;ServiceCallGraphEdge>());&#xA;}&#xA;&#xA;for (ServiceCallGraphEdge edge : getEdges()) {&#xA;&#x9;getOutgoingEdges().get(edge.getFrom()).add(edge);&#xA;&#x9;getIncomingEdges().get(edge.getTo()).add(edge);&#xA;}"/>
      <genOperations ecoreOperation="ServiceCallGraph.ecore#//ServiceCallGraph/removeNode"
          body="if (getIncomingEdges().get(node).size() == 0 &amp;&amp; getOutgoingEdges().get(node).size() == 0) {&#xA;&#x9;getNodes().remove(node);&#xA;} else {&#xA;&#x9;throw new IllegalStateException(&#xA;&#x9;&#x9;&#x9;&quot;There are existing edges for a node that should be removed. Please remove the edges in advance to be able to remove the node.&quot;);&#xA;}">
        <genParameters ecoreParameter="ServiceCallGraph.ecore#//ServiceCallGraph/removeNode/node"/>
      </genOperations>
    </genClasses>
    <genClasses ecoreClass="ServiceCallGraph.ecore#//ServiceCallGraphEdge">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraphEdge/from"/>
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraphEdge/to"/>
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute ServiceCallGraph.ecore#//ServiceCallGraphEdge/value"/>
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraphEdge/externalCall"/>
    </genClasses>
    <genClasses ecoreClass="ServiceCallGraph.ecore#//EdgeList">
      <genFeatures createChild="false" ecoreFeature="ecore:EAttribute ServiceCallGraph.ecore#//EdgeList/key"/>
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//EdgeList/value"/>
    </genClasses>
    <genClasses ecoreClass="ServiceCallGraph.ecore#//ServiceCallGraphNode">
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraphNode/seff"/>
      <genFeatures notify="false" createChild="false" propertySortChoices="true" ecoreFeature="ecore:EReference ServiceCallGraph.ecore#//ServiceCallGraphNode/host"/>
    </genClasses>
  </genPackages>
</genmodel:GenModel>
